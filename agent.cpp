//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include <ctime>
#include <cmath>
#include "agent.h"


//############################################################################
//                                                                           #
//                           Class agent                            #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

// ===========================================================================
//                                  Constructors
// ===========================================================================
agent::agent(void)
{
	srand(time(NULL));
	coord=new double[2];
	coord[0]=(rand()/(double)RAND_MAX) * WIDTH;
	coord[1]=(rand()/(double)RAND_MAX) * HEIGHT;

	//Initial speed: vx=1; vy=1
	speed=new double[2];
	speed[0]=1;
	speed[1]=1;
}

// ===========================================================================
//                                  Destructor
// ===========================================================================
agent::~agent(void)
{
	delete coord;
	coord=NULL;
	delete speed;
	speed=NULL;
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================

double* agent::get_coord(void) const
{
	return coord;
}

double* agent::get_speed(void) const
{
	return speed;
}

bool agent::near(const agent &other) const
{
	bool res=0;
	double norm=sqrt(coord[0]*other.get_coord()[0]+coord[1]*other.get_coord()[1]);
	if(norm<RADIUS)
	{
		res=1;
	}
	return res;
}
// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
